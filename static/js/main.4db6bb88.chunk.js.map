{"version":3,"sources":["components/Titles.js","components/Forms.js","components/Weather.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getWeather","name","id","defaultValue","onClick","getBackground","value","disabled","moment","require","Weather","tempArray","item","htmlDoc","Object","keys","forEach","index","console","log","push","key","dt_txt","format","src","weather","icon","description","main","temp","temp_min","temp_max","wind","speed","pressure","deg","Nav","App","state","customStyle","e","a","target","preventDefault","city","elements","fetch","call","json","data","photoCall","dataPhoto","urls","regular","backgroundImage","WebkitTransition","backgroundRepeat","backgroundSize","backgroundPosition","height","list","tempList","map","includes","setState","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAQeA,E,iLAJX,OAAO,yBAAKC,UAAU,kB,GAFLC,IAAMC,WCgCZC,E,iLA9BX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,WAAYP,UAAU,SAC/C,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,4BACEQ,KAAK,OACLR,UAAU,eACVS,GAAG,eACHC,aAAc,UACdC,QAASN,KAAKC,MAAMM,eAEpB,4BAAQC,MAAM,UAAUC,UAAQ,GAAhC,qBAGA,4BAAQD,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,iBAAd,mBAGJ,yBAAKb,UAAU,cACb,4BAAQA,UAAU,mBAAlB,uB,GAxBOC,IAAMC,WCDrBa,EAASC,EAAQ,IA2DNC,E,iLAvDX,IAAIC,EAAYb,KAAKC,MAAMa,KACrBC,EAAU,GAmDhB,OAlDIF,EACFG,OAAOC,KAAKJ,GAAWK,SAAQ,SAAAC,GAC7BC,QAAQC,IAAI,WACZN,EAAQO,KACN,yBAAK3B,UAAU,uBAAuB4B,IAAKJ,GACzC,6BACE,2BACE,gCACGT,EAAOG,EAAUM,GAAOK,QAAQC,OAAO,kBAG5C,yBACEC,IACE,mCACAb,EAAUM,GAAOQ,QAAQ,GAAGC,KAC5B,SAGJ,2BACE,gCAASf,EAAUM,GAAOQ,QAAQ,GAAGE,eAGzC,6BACE,2CACe,gCAAShB,EAAUM,GAAOW,KAAKC,KAA/B,UAEf,mCACO,gCAASlB,EAAUM,GAAOW,KAAKE,SAA/B,UAEP,oCACQ,gCAASnB,EAAUM,GAAOW,KAAKG,SAA/B,WAGV,6BACE,oCACQ,gCAASpB,EAAUM,GAAOe,KAAKC,MAA/B,QAER,wCACY,gCAAStB,EAAUM,GAAOW,KAAKM,SAA/B,OAAqD,KAEjE,8CACkB,gCAASvB,EAAUM,GAAOe,KAAKG,IAA/B,eAO1BjB,QAAQC,IAAI,IAEP,yBAAK1B,UAAU,mBAAmBoB,O,GAtDvBnB,IAAMC,WCWbyC,E,iLAVX,OACE,yBAAK3C,UAAU,8BACb,6BACE,wBAAIA,UAAU,SAAd,qB,GALQC,IAAMC,WCIlB0B,EAAM,mCAuEGgB,E,2MApEbC,MAAQ,CACN1B,KAAM,K,EAGR2B,YAAc,G,EAEdvC,W,uCAAa,WAAMwC,GAAN,2BAAAC,EAAA,6DACXvB,QAAQC,IAAIqB,EAAEE,OAAOpC,OACrBkC,EAAEG,iBACEC,EAAOJ,EAAEE,OAAOG,SAASD,KAAKtC,MAClCY,QAAQC,IAAIyB,GAJD,SAKQE,MAAM,qDAAD,OAC+BF,EAD/B,+BAC0DvB,EAD1D,oBALb,cAKL0B,EALK,gBAQQA,EAAKC,OARb,cAQLC,EARK,OASX/B,QAAQC,IAAI8B,GATD,UAWaH,MACtB,2HACEF,EACA,0BAdO,eAWLM,EAXK,iBAgBaA,EAAUF,OAhBvB,QAgBLG,EAhBK,OAiBXjC,QAAQC,IAAIgC,EAAUC,KAAKC,SAE3B,EAAKd,YAAc,CACjBe,gBAAiB,OAASH,EAAUC,KAAKC,QAAU,IACnDE,iBAAkB,MAClBC,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,WACpBC,OAAQ,QAGG,YAATf,IACF1B,QAAQC,IAAI,SACNyC,EAAOX,EAAKW,KAClB1C,QAAQC,IAAIyC,GACRC,EAAW,GAEfD,EAAKE,KAAI,SAAClD,EAAMS,GAId,OAHIT,EAAKU,OAAOyC,SAAS,aACvBF,EAASzC,KAAKR,IAET,KAETM,QAAQC,IAAI0C,GAEZ,EAAKG,SAAS,CACZnC,KAAMgC,KA3CC,4C,8HAiDX,OACE,yBAAKI,MAAOnE,KAAKyC,aACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAK9C,UAAU,QACb,kBAAC,EAAD,CAAMO,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CAASY,KAAMd,KAAKwC,MAAMT,a,GA9DlBnC,IAAMC,WCIJuE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4db6bb88.chunk.js","sourcesContent":["import React from \"react\"\n\nclass Titles extends React.Component {\n  render() {\n    return <div className=\"container\"></div>\n  }\n}\n\nexport default Titles\n","import React from \"react\"\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <form onSubmit={this.props.getWeather} className=\"index\">\n        <div className=\"formData\">\n          <div className=\"form-group\">\n            <select\n              name=\"city\"\n              className=\"form-control\"\n              id=\"selectOption\"\n              defaultValue={\"DEFAULT\"}\n              onClick={this.props.getBackground}\n            >\n              <option value=\"DEFAULT\" disabled>\n                -- Select City --\n              </option>\n              <option value=\"Rochester\">Rochester</option>\n              <option value=\"New York\">New York</option>\n              <option value=\"Chicago\">Chicago</option>\n              <option value=\"Orlando\">Orlando</option>\n              <option value=\"San Francisco\">San Francisco</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <button className=\"btn btn-primary\">Get forecast</button>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\nexport default Form\n","import React from \"react\"\nvar moment = require(\"moment\")\n\nclass Weather extends React.Component {\n  render() {\n    let tempArray = this.props.item\n    const htmlDoc = []\n    if (tempArray) {\n      Object.keys(tempArray).forEach(index => {\n        console.log(\"in true\")\n        htmlDoc.push(\n          <div className=\"jumbotron fadeInLeft\" key={index}>\n            <div>\n              <p>\n                <strong>\n                  {moment(tempArray[index].dt_txt).format(\"MMMM Do YYYY\")}\n                </strong>\n              </p>\n              <img\n                src={\n                  \"http://openweathermap.org/img/w/\" +\n                  tempArray[index].weather[0].icon +\n                  \".png\"\n                }\n              ></img>\n              <p>\n                <strong>{tempArray[index].weather[0].description}</strong>\n              </p>\n            </div>\n            <div>\n              <p>\n                Temperature: <strong>{tempArray[index].main.temp}째F</strong>\n              </p>\n              <p>\n                Low: <strong>{tempArray[index].main.temp_min}째F</strong>\n              </p>\n              <p>\n                High: <strong>{tempArray[index].main.temp_max}째F</strong>\n              </p>\n            </div>\n            <div>\n              <p>\n                Wind: <strong>{tempArray[index].wind.speed}mph</strong>\n              </p>\n              <p>\n                Pressure: <strong>{tempArray[index].main.pressure}atm</strong>{\" \"}\n              </p>\n              <p>\n                Wind-Direction: <strong>{tempArray[index].wind.deg}째</strong>\n              </p>\n            </div>\n          </div>\n        )\n      })\n    } else {\n      console.log(\"\")\n    }\n    return <div className=\"container-fluid\">{htmlDoc}</div>\n  }\n}\nexport default Weather\n","import React from \"react\"\n\nclass Nav extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <div>\n          <h3 className=\"title\">Weather App</h3>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Nav\n","import React from \"react\"\nimport Titles from \"./components/Titles\"\nimport Form from \"./components/Forms\"\nimport Weather from \"./components/Weather\"\nimport Nav from \"./components/Nav\"\n\nconst key = \"299ac979ca424649438d4f5d5900f341\"\n\nclass App extends React.Component {\n  state = {\n    item: \" \"\n  }\n\n  customStyle = {}\n  //API call\n  getWeather = async e => {\n    console.log(e.target.value)\n    e.preventDefault()\n    let city = e.target.elements.city.value\n    console.log(city)\n    const call = await fetch(\n      `http://api.openweathermap.org/data/2.5/forecast?q=${city},us&mode=json&appid=${key}&units=imperial`\n    )\n    const data = await call.json()\n    console.log(data)\n\n    const photoCall = await fetch(\n      \"https://api.unsplash.com/photos/random?client_id=85b872b221af666e43dea4c0a574a41456eee2d98755bffe199aa152f66c3901&query=\" +\n        city +\n        \"&orientation=landscape\"\n    )\n    const dataPhoto = await photoCall.json()\n    console.log(dataPhoto.urls.regular)\n\n    this.customStyle = {\n      backgroundImage: \"url(\" + dataPhoto.urls.regular + \")\",\n      WebkitTransition: \"all\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"absolute\",\n      height: \"100%\"\n    }\n\n    if (city !== \"DEFAULT\") {\n      console.log(\"in if\")\n      const list = data.list\n      console.log(list)\n      let tempList = []\n\n      list.map((item, key) => {\n        if (item.dt_txt.includes(\"15:00:00\")) {\n          tempList.push(item)\n        }\n        return true\n      })\n      console.log(tempList)\n\n      this.setState({\n        temp: tempList\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div style={this.customStyle}>\n        <Nav />\n        <Titles />\n        <div className=\"data\">\n          <Form getWeather={this.getWeather} />\n          <Weather item={this.state.temp} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}